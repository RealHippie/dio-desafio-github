				* Códigos git *

** Git init **
Para começar a trabalhar com Git, você precisa inicializar um diretório Git na sua máquina local, para isso é necessário executar o comando “$ git init”. Este comando irá criar a estrutura Git dentro do diretório em que foi executado.

** Git clone **
Na maioria das vezes você irá começar a trabalhar com os arquivos de um repositório remoto já existente. Para copiar os arquivos do servidor remoto para sua máquina local execute o comando ​“$ git clone ​https://usuario@enderecoRemoto.com/repositorio.git​”

** Git add ***
Para fazer um commit e salvar aquele snapshot do seu trabalho é necessário antes adicionar suas alterações na staging area. Este é um local de trabalho, onde você pode colocar os arquivos que realmente deseja adicionar no commit, assim você pode particionar melhor seu trabalho e organizar melhor seus commits. Para adicionar todos os arquivos alterados e novos arquivos na staging area use o comando ​“$ git add .”​, caso queira adicionar arquivos específicos utilize o comando ​“$ git add nome-do-arquivo.txt nome-do-arquivo2.txt”​.

E agora um detalhe muito importante: caso você deseja adicionar na staging area, além das alterações e novos arquivos, as deleções que realizou, você deve utilizar o comando ​“$ git add -A”.

** Git commit **
Na prática, para se realizar um commit é necessário que você tenha arquivos na sua staging area. Uma vez que os arquivos estão lá basta você utilizar o comando ​“$ git commit -m 'anotações'” para salvar a “fotografia” do seu código. Uma vez que você executa este comando é gerado um commit com um código identificador único. Você pode utilizar o comando git checkout com o código gerado para voltar naquele snapshot do seu programa.

** Git pull **
Uma vez que você fez alterações no seu código e criou seus commits você precisa que os outros desenvolvedores tenham acesso a essas alterações. Lembre que até o momento tudo o que você fez foi na cópia do seu repositório na sua máquina local.

Para que você envie suas alterações para a origem você precisa antes verificar se o repositório remoto sofreu alterações de outras pessoas desde que você começou a trabalhar naquela branch, e caso haja alterações você precisa trazê-las para o seu código. O comando utilizado para isso é o comando ​ “$ git pull”​.

Quando você realiza um pull, o Git vai buscar as alterações de código dos outros desenvolvedores e tentar fazer o merge daquelas alterações no seu código. Caso o Git não consiga fazer o merge automático ele marcará as seções do código onde há conflito e você precisará juntar os código manualmente, indicando se vai utilizar as alterações que vieram da origem, as suas alterações locais, ambas ou até mesmo mesclar as duas. Uma vez que terminar de realizar o merge, faça um git add e depois um commit para salvar essas alterações. Esse processo é um pouco traumático para muitos desenvolvedores, então muita calma na hora de realizar um pull.

Se houver conflitos, não se desespere, faça o merge com calma e lembre-se: os pulls são reversíveis. Caso aconteça algum problema, seu código não está perdido: é sempre possível voltar no commit anterior ao pull.

** Git push **
Você realizou seu pull, agora sua branch está alinhada com a branch na origem e você finalmente pode fazer upload das suas alterações. Para fazer esse upload use o comando ​“$ git push origin nome-da-branch” .